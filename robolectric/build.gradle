evaluationDependsOn(':app')
apply plugin: 'java'

def androidSDKPath =  "$System.env.ANDROID_HOME"
repositories {
    mavenCentral()
    maven { url 'file://' + androidSDKPath + '/extras/android/m2repository' }
    maven { url 'file://' + androidSDKPath + '/extras/google/m2repository' }
}

dependencies {
    def androidModule = project(':app')
    //add our app classes to compilation path
    compile androidModule

    testCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
        //disabling all transitive dependencies of this dependency
        transitive = false
    }

    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile('org.robolectric:robolectric:2.4') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'sqlite-jdbc'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'
        exclude group: 'org.apache.httpcomponents'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.google.android', module: 'support-v4'
        exclude group: 'com.android-support', module: 'appcompat-v7'
    }

    testCompile ('com.squareup.assertj:assertj-android:1.0.0') {
        exclude module: 'support-annotations'
    }

    //add all of the jars and output from our 'first' variant to the test classpath
    def compileTask = androidModule.android.applicationVariants.toList().first().javaCompile
    testCompile compileTask.classpath
    testCompile compileTask.outputs.files


    //add all of the android gradle plugin bootclasspath items to our test compile classpath
    testCompile files(androidModule.plugins.findPlugin("com.android.application").getBootClasspath())
}

test {
    filter{
        include '**/*Test.class'
        exclude '**/espresso/**/*.class'
    }
}
